---
- name: Run opkg update
  ansible.builtin.command: opkg update
  ignore_errors: true
  register: opkg_update
  changed_when: opkg_update.rc == 0

- name: Install filesystem manipulation packages
  community.general.opkg:
    name:
      - kmod-nvme
      - mmc-utils
      - kmod-mtd-rw
      - kmod-fs-ext4
      - lsblk
      - parted
      - blkid
      - uvol
      - autopart
    state: present

- name: Load the kernel nvme module
  community.general.modprobe:
    name: nvme
    state: present
  register: modprobe_nvme
  changed_when: modprobe_nvme == 0

- name: Check if modprobe detected the NVMe - lsblk -Nnr
  ignore_errors: true
  ansible.builtin.command: lsblk -Nnr
  register: lsblk_nnr
  changed_when: lsblk_nnr.rc != 0

# if the os fails to report the presence of the NVMe after modprobe, we reboot.
- name: Reboot in order to detect all devices
  # since ansible.builtin.reboot does not notice when the system comes back and reports timeout
  ansible.builtin.command: "/sbin/reboot"
  async: 1
  poll: 0
  when: lsblk_nnr.stdout == ""
  changed_when: true

- name: Wait for reboot
  ansible.builtin.wait_for_connection:
    timeout: 300
    delay: 60
  when: lsblk_nnr.stdout == ""

# if the NVMe is not detected after reboot, you do not have NVMe
- name: Check after reboot if you have NVMe
  ansible.builtin.command: lsblk -Nnr
  register: lsblk_nnr
  changed_when: lsblk_nnr.rc != 0

- name: NVMe absent
  ansible.builtin.debug:
    msg: You have no NVMe disks installed
  when: lsblk_nnr.stdout.split('\n')  | regex_findall ('.*nvme0n1.*', multiline=true) | length == 0

- name: Check if the NVMe is already mounted
  ansible.builtin.command: mount # noqa: command-instead-of-module
  register: nvme_mounted
  changed_when: nvme_mounted.rc == 1

- name: NVMe already mounted
  ansible.builtin.debug:
    msg: Your NVMe is already mounted, skip format and mount
  when: nvme_mounted.stdout | regex_findall ('.*nvme0n1.*', multiline=true) | length  == 1

- name: Partition, format and mount NVMe
  ansible.builtin.include_tasks: mount_nvme.yaml
  when: (lsblk_nnr.stdout.split('\n') | length == 1) and (nvme_mounted.stdout | regex_findall ('.*nvme0n1.*', multiline=true) | length == 0)
